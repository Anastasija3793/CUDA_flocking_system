#ifndef BOID_H
#define BOID_H

/// @file Boid.h
/// @brief Library of serialized program for creating a boid with its attributes and sets of flocking behaviour rules
/// @author Anastasija Belaka
/// @version N/A
/// @date 30/04/2019 Updated to NCCA Coding standard
/// Revision History : https://github.com/Anastasija3793/CUDA_flocking_system
/// Initial Version 12/02/2019

#include <vector>
#include <ngl/Vec3.h>
#include <ngl/Vec4.h>
#include <ngl/Mat4.h>
#include <complex>

class Flock;
//----------------------------------------------------------------------------------------------------------------------
/// @class Boid "Boid.h"
/// @brief Boid class which contains Boid constructor, attributes, behaviour/rules
/// @author Anastasija Belaka
/// @version N/A
/// @date 30/04/2019 Updated to NCCA Coding standard
/// Revision History : See https://github.com/Anastasija3793/CUDA_flocking_system
//----------------------------------------------------------------------------------------------------------------------
class Boid
{
public:
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief main Boid constructor
    /// @param[in] *_flock flock pointer
    //----------------------------------------------------------------------------------------------------------------------
    Boid(Flock *_flock);
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief another Boid constructor for testing with its own values
    /// @param[in] _pos position of the boid
    /// @param[in] _vel velocity of the boid
    //----------------------------------------------------------------------------------------------------------------------
    Boid(ngl::Vec3 _pos, ngl::Vec3 _vel);
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief another Boid constructor for testing with its own values
    /// @param[in] _pos position of the boid
    /// @param[in] _vel velocity of the boid
    /// @param[in] *_flock flock pointer
    //----------------------------------------------------------------------------------------------------------------------
    Boid(ngl::Vec3 _pos, ngl::Vec3 _vel, Flock *_flock);
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief another Boid constructor for testing with its own values
    /// @param[in] _pos position of the boid
    /// @param[in] _vel velocity of the boid
    /// @param[in] _target target towards which the boid is going to steer
    //----------------------------------------------------------------------------------------------------------------------
    Boid(ngl::Vec3 _pos, ngl::Vec3 _vel, ngl::Vec3 _target);
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief update function
    //----------------------------------------------------------------------------------------------------------------------
    void update();
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief getPos function gets the position
    /// @param m_pos position
    //----------------------------------------------------------------------------------------------------------------------
    inline ngl::Vec3 getPos() const {return m_pos;}
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief applyForce function to apply the force allowing to slow down/speed up the boid movement
    /// @param _force parameter for passing force vector
    //----------------------------------------------------------------------------------------------------------------------
    void applyForce(ngl::Vec3 _force);
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief seek function allows for a boid to seek a target
    /// @param _target parameter for passing the target vector
    //----------------------------------------------------------------------------------------------------------------------
    void seek(ngl::Vec3& _target);
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief separate separation function allowing boid to get away from other boids which are too close (inside the radius)
    /// @param _sepVec parameter for passing the separation function
    //----------------------------------------------------------------------------------------------------------------------
    void separate(ngl::Vec3& _sepVec);
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief align function allowing to slightly align with others
    /// @param _aliVec parameter for passing alignment vector
    //----------------------------------------------------------------------------------------------------------------------
    void align(ngl::Vec3& _aliVec);
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief cohesion function allowing to follow cohesion rule but not too strict
    /// @param _cohVec parameter for passing cohesion vector
    //----------------------------------------------------------------------------------------------------------------------
    void cohesion(ngl::Vec3& _cohVec);
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief flock function to call all three rules at once which provides a flocking behaviour
    //----------------------------------------------------------------------------------------------------------------------
    void flock();
//private:
    //----------------------------------------------------------------------------------------------------------------------
    /// @param m_force force vector
    //----------------------------------------------------------------------------------------------------------------------
    ngl::Vec3 m_force;
    //----------------------------------------------------------------------------------------------------------------------
    /// @param m_steer steering vector
    //----------------------------------------------------------------------------------------------------------------------
    ngl::Vec3 m_steer;
    //----------------------------------------------------------------------------------------------------------------------
    /// @param m_pos position of the boid
    //----------------------------------------------------------------------------------------------------------------------
    ngl::Vec3 m_pos;
    //----------------------------------------------------------------------------------------------------------------------
    /// @param m_vel velocity of the boid
    //----------------------------------------------------------------------------------------------------------------------
    ngl::Vec3 m_vel;
    //----------------------------------------------------------------------------------------------------------------------
    /// @param max_speed the maximum speed which limits the speed of boids
    //----------------------------------------------------------------------------------------------------------------------
    float max_speed = 1.0f;
    //----------------------------------------------------------------------------------------------------------------------
    /// @param m_target target towards which the boid is going to steer
    //----------------------------------------------------------------------------------------------------------------------
    ngl::Vec3 m_target;
    //----------------------------------------------------------------------------------------------------------------------
    /// @param m_acc acceleration
    //----------------------------------------------------------------------------------------------------------------------
    ngl::Vec3 m_acc = ngl::Vec3(0.0f,0.0f,0.0f);
    //----------------------------------------------------------------------------------------------------------------------
    /// @param m_sep separation vector for testing
    //----------------------------------------------------------------------------------------------------------------------
    ngl::Vec3 m_sep = ngl::Vec3(0.0f,0.0f,0.0f);
    //----------------------------------------------------------------------------------------------------------------------
    /// @param max_force the maximum force which limits the force with which boids move
    //----------------------------------------------------------------------------------------------------------------------
    float max_force = 0.03f;
    //----------------------------------------------------------------------------------------------------------------------
    /// @param m_desired desired velocity
    //----------------------------------------------------------------------------------------------------------------------
    ngl::Vec3 m_desired;
    //----------------------------------------------------------------------------------------------------------------------
    /// @param m_sepRad neighbourhood radius for separation rule
    //----------------------------------------------------------------------------------------------------------------------
    float m_sepRad = 15.0f;
    //----------------------------------------------------------------------------------------------------------------------
    /// @param m_neighbourDist neighbourhood radius for alignment and cohesion rule
    //----------------------------------------------------------------------------------------------------------------------
    float m_neighbourDist = 30.0f;
    //----------------------------------------------------------------------------------------------------------------------
    /// @param m_flock flock containing boids
    //----------------------------------------------------------------------------------------------------------------------
    Flock *m_flock;
};

#endif // BOID_H
